
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Период.ДатаНачала = НачалоНедели(ТекущаяДатаСеанса());
	Объект.Период.ДатаОкончания = КонецНедели(ТекущаяДатаСеанса());
	
	ЗаполнитьПланировщикНаСервере(Объект.Период.ДатаНачала, Объект.Период.ДатаОкончания);
	
	// Настроить планировщик.
	Планировщик.ЕдиницаПериодическогоВарианта   = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 8;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 2;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='дддд, д ММММ гггг'";
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	НачалоПериода = НачалоНедели(ТекущаяДатаСеанса());
	КонецПериода  = КонецНедели(ТекущаяДатаСеанса());
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьПланировщик" Тогда
		ЗаполнитьПланировщикНаСервере(Объект.Период.ДатаНачала, Объект.Период.ДатаОкончания);
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскиванияВнутри(Элемент, ПараметрыПеретаскивания, ВариантИзмененияГраниц, ДействиеПеретаскивания, Отказ)
	Если ПараметрыПеретаскивания.Количество() Тогда
	
		Сообщить("Начало: " + ПараметрыПеретаскивания[0].Начало + " - Конец: " + ПараметрыПеретаскивания[0].Конец);
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОбработкаФормированияКоманд(Элемент, Параметры, Команды, КомандаПоУмолчанию)
	Тип = Новый ОписаниеТипов("ОписаниеКомандыПланировщика");
	Команда = Новый Структура;
	Команда = Тип.ПривестиЗначение(Команда);
	Команда.Команда = Новый ОписаниеОповещения("ЗанятиеПровести", ЭтотОбъект, Параметры);
	Команда.Представление = "Проведено";
	Команды.Добавить(Команда);
	
	Команда = Новый Структура;
	Команда = Тип.ПривестиЗначение(Команда);
	Команда.Команда = Новый ОписаниеОповещения("ЗанятиеОтменить", ЭтотОбъект, Параметры);
	Команда.Представление = "Отменить";
	Команды.Добавить(Команда);

	Команда = Новый Структура;
	Команда = Тип.ПривестиЗначение(Команда);
	Команда.Команда = Новый ОписаниеОповещения("ЗанятиеПеренести", ЭтотОбъект, Параметры);
	Команда.Представление = "Перенести";
	Команды.Добавить(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	Если ТекущиеПериодыОтображения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДатаНачала = ТекущиеПериодыОтображения[0].Начало;
	ДатаОкончания = ТекущиеПериодыОтображения[0].Конец;
	ЗаполнитьПланировщикНаСервере(ДатаНачала, ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаЭлементеИзмерения(Элемент, ЭлементИзмерения, ЗначенияИзмерений, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаЭлементеШкалыВремени(Элемент, ЭлементШкалыВремени, Дата)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаПеренесенномЗаголовкеШкалыВремени(Элемент, Дата)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаНавигационнойСсылке(Элемент, Источник, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНажатиеНаДействиеПланировщика(Элемент, ЭлементПланировщика, Действие)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, ЗначенияИзмерений, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаПланированияЗанятий",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗанятиеПровести(ПараметрыКоманды) Экспорт 
	Если ПараметрыКоманды.Элементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПараметрыКоманды.Элементы.Количество() = 1 Тогда
		ЗначениеЭлемента = ПараметрыКоманды.Элементы[0].Значение;
		Если ЗначениеЭлемента.Документ.Пустая() Тогда
			ЗанятиеПровестиНаСервере(ЗначениеЭлемента);
		КонецЕсли;
	КонецЕсли;
	Оповестить("ОбновитьПланировщик");
КонецПроцедуры

&НаСервере
Процедура ЗанятиеПровестиНаСервере(ДанныеЗанятия)
	 //Сначала необходимо проверить, что задание ещё не учтено
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ДанныеЗанятия.ДатаЗанятия);
	ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ДБ_ВидыУчетаРабочегоВремени.Языки);
	УчетВремени = Новый ТаблицаЗначений;
	УчетВремени.Колонки.Добавить("Контакт");
	УчетВремени.Колонки.Добавить("КоличествоЧасов");
	СтрокаУчетаВремени = УчетВремени.Добавить();
	СтрокаУчетаВремени.Контакт = ДанныеЗанятия.Ученик;
	СтрокаУчетаВремени.КоличествоЧасов = ДанныеЗанятия.КоличествоЧасов;
	ДанныеЗаполнения.Вставить("УчетВремени", УчетВремени);
	ДокументУчетаРабочегоВремени = Документы.ДБ_УчетРабочегоВремениНовый.СоздатьДокумент();
	ДокументУчетаРабочегоВремени.Заполнить(ДанныеЗаполнения);
	ДокументУчетаРабочегоВремени.Дата = ТекущаяДатаСеанса();
	ДокументУчетаРабочегоВремени.Записать(РежимЗаписиДокумента.Проведение);
	
	НаборЗаписей = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УченикГруппа.Установить(ДанныеЗанятия.Ученик);
	НаборЗаписей.Отбор.ДатаЗанятия.Установить(ДанныеЗанятия.ДатаЗанятия);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		Запись = НаборЗаписей[0];
		Запись.Отменено = Ложь;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗанятиеОтменить(ПараметрыКоманды) Экспорт 
	Если ПараметрыКоманды.Элементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПараметрыКоманды.Элементы.Количество() = 1 Тогда
		ЗначениеЭлемента = ПараметрыКоманды.Элементы[0].Значение;
		ЗанятиеОтменитьНаСервере(ЗначениеЭлемента);
	КонецЕсли;
	Оповестить("ОбновитьПланировщик");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗанятиеОтменитьНаСервере(ДанныеЗанятия)

	Если НЕ ДанныеЗанятия.Документ.Пустая() Тогда
		ДокументОбъект = ДанныеЗанятия.Документ.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УченикГруппа.Установить(ДанныеЗанятия.Ученик);
	НаборЗаписей.Отбор.ДатаЗанятия.Установить(ДанныеЗанятия.ДатаЗанятия);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		Запись = НаборЗаписей[0];
		Запись.Отменено = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗанятиеОтменитьНаСервере(ЗначениеЭлемента)()

&НаКлиенте
Процедура ЗанятиеПеренести(ПараметрыКоманды) Экспорт 
	//Элементы.Планировщик
	//Планировщик.
	//ЗанятиеПровестиНаСервере();
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПланировщикНаСервере(пДатаНачала, пДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа КАК Ученик,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия КАК ДатаЗанятия,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	ДБ_ПланыЗанятийСрезПоследних.КоличествоЧасов КАК КоличествоЧасов,
		|	ДБ_ПланыЗанятийСрезПоследних.ВремяПроведения КАК ВремяПроведения,
		|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа.Представление КАК УченикПредставление,
		|	ЕСТЬNULL(ДБ_УчетРабочегоВремениОбороты.КоличествоЧасовОборот, 0) КАК Проведено,
		|	ЕСТЬNULL(ДБ_УчетРабочегоВремениОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.ДБ_УчетРабочегоВремениНовый.ПустаяСсылка)) КАК Документ,
		|	ДБ_ПланыЗанятийСрезПоследних.Отменено КАК Отменено,
		|	isnull(КонтактыДополнительныеРеквизиты.Значение,Ложь) КАК Персональный
		|ИЗ
		|	РегистрСведений.ДБ_ПланыЗанятий.СрезПоследних(, ДатаЗанятия МЕЖДУ &ДатаНачала И &ДатаОкончания) КАК ДБ_ПланыЗанятийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДБ_УчетРабочегоВремени.Обороты(, , Авто, ) КАК ДБ_УчетРабочегоВремениОбороты
		|		ПО ДБ_ПланыЗанятийСрезПоследних.УченикГруппа = ДБ_УчетРабочегоВремениОбороты.Контакт
		|			И ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия = ДБ_УчетРабочегоВремениОбороты.ПериодДень
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контакты.ДополнительныеРеквизиты КАК КонтактыДополнительныеРеквизиты
		|		ПО (ДБ_ПланыЗанятийСрезПоследних.УченикГруппа = КонтактыДополнительныеРеквизиты.Ссылка
		|				И КонтактыДополнительныеРеквизиты.Свойство = &Свойство)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	УченикПредставление";
	
	Запрос.УстановитьПараметр("ДатаНачала"		, пДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, пДатаОкончания);
	Запрос.УстановитьПараметр("Свойство"		, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ПерсональныйУченик"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Планировщик.Измерения.Очистить();
	Планировщик.Элементы.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаНачала = ВыборкаДетальныеЗаписи.ДатаНачала;
		ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;
		НовыйЭлемент = Планировщик.Элементы.Добавить(ДатаНачала, ДатаОкончания);
		НовыйЭлемент.Текст = ВыборкаДетальныеЗаписи.УченикПредставление;
		НовыйЭлемент.Значение = Новый Структура("Ученик,ДатаЗанятия,КоличествоЧасов,Документ");
		ЗаполнитьЗначенияСвойств(НовыйЭлемент.Значение, ВыборкаДетальныеЗаписи);
		
		ПерсональныйУченик = ВыборкаДетальныеЗаписи.Персональный;
		
		Если НЕ ВыборкаДетальныеЗаписи.Проведено Тогда
			ЦветФона = Новый Цвет(63, 136, 143);	// Бирюзово-синий
			Если ВыборкаДетальныеЗаписи.Персональный Тогда
				ЦветФона = Новый Цвет(119, 221, 231);	// Бирюзово-голубой Крайола
			КонецЕсли;
			НовыйЭлемент.ЦветФона = ЦветФона;
		Иначе
			ЦветФона = Новый Цвет(30, 86, 69);	// Бирюзово-зеленый
			Если ВыборкаДетальныеЗаписи.Персональный Тогда
				ЦветФона = Новый Цвет(0, 49, 83);	// Берлинская лазурь
			КонецЕсли;
			НовыйЭлемент.ЦветФона = ЦветФона;
			НовыйЭлемент.ЦветРамки = WebЦвета.Черный;
			//НовыйЭлемент.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.Отменено Тогда
			НовыйЭлемент.ЦветФона = WebЦвета.Красный;
			НовыйЭлемент.ЦветРамки = WebЦвета.Черный;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПланировщикНаСервере()
	
#КонецОбласти
