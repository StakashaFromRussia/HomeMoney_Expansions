#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РежимРаботы = 2;
	Объект.Период.ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());
	Объект.Период.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	УправлениеФормойКлиентСервер(ЭтотОбъект);
	ОбновитьРасписаниеУченика();
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	ОбновитьРасписаниеУченика();
	УправлениеФормойКлиентСервер(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьРасписаниеУченика();
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбновитьРасписаниеУченика();
КонецПроцедуры

&НаКлиенте
Процедура УченикПриИзменении(Элемент)
	ОбновитьРасписаниеУченика();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьУченика(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеДобавленияУченика", ЭтотОбъект);
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаДобавленияУченика", , ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьЗанятие(Команда)
	ПараметрыФормы = Новый Структура("Ученик, ДатаЗанятия");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеДобавленияЗанятия", ЭтотОбъект);	
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаДобавленияЗанятия", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УчестьЗанятие(Команда)
	ОбработатьСобытиеЗанятияНаКлиенте("ЗанятиеПроведено");
КонецПроцедуры

// Учесть занятие на сервере.
// 
// Параметры:
//  ДанныеЗанятия - Структура - Данные занятия:
// * ДатаЗанятия - Дата -
// * Ученик - СправочникСсылка.Контакты -
// * КоличествоЧасов - Число -
&НаСервереБезКонтекста
Процедура УчестьЗанятиеНаСервере(ДанныеЗанятия)
	// Сначала необходимо проверить, что задание ещё не учтено
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ДанныеЗанятия.ДатаЗанятия);
	ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ДБ_ВидыУчетаРабочегоВремени.Языки);
	УчетВремени = Новый ТаблицаЗначений;
	УчетВремени.Колонки.Добавить("Контакт");
	УчетВремени.Колонки.Добавить("КоличествоЧасов");
	СтрокаУчетаВремени = УчетВремени.Добавить();
	СтрокаУчетаВремени.Контакт = ДанныеЗанятия.Ученик;
	СтрокаУчетаВремени.КоличествоЧасов = ДанныеЗанятия.КоличествоЧасов;
	ДанныеЗаполнения.Вставить("УчетВремени", УчетВремени);
	ДокументУчетаРабочегоВремени = Документы.ДБ_УчетРабочегоВремениНовый.СоздатьДокумент();
	ДокументУчетаРабочегоВремени.Заполнить(ДанныеЗаполнения);
	ДокументУчетаРабочегоВремени.Записать(РежимЗаписиДокумента.Проведение);
	ОбщегоНазначения.СообщитьПользователю("Занятие проведено");
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗанятие(Команда)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Ученик = ТекущиеДанные.Ученик;
	ОбработатьСобытиеЗанятияНаКлиенте("ЗанятиеПеренесено");
	ПараметрыФормы = Новый Структура("Ученик, ДатаЗанятия", Ученик);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеДобавленияЗанятия", ЭтотОбъект);	
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаДобавленияЗанятия", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиЗанятиеНаСервере(ДанныеЗанятия)
	// предыдущее событие удаляется и создается новое
	// совмещаем процедуры ДобавитьСобытие и УдалитьСобытие
	НаборЗаписей = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УченикГруппа.Установить(ДанныеЗанятия.Ученик);
	НаборЗаписей.Отбор.ДатаЗанятия.Установить(ДанныеЗанятия.ДатаЗанятия);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	ДБ_РаботаСКалендарем.УдалитьСобытие(ДанныеЗанятия.Идентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗанятие(Команда)
	ОбработатьСобытиеЗанятияНаКлиенте("ЗанятиеОтменено");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьЗанятиеНаСервере(ДанныеЗанятия)
	НаборЗаписей = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УченикГруппа.Установить(ДанныеЗанятия.Ученик);
	НаборЗаписей.Отбор.ДатаЗанятия.Установить(ДанныеЗанятия.ДатаЗанятия);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	ДБ_РаботаСКалендарем.УдалитьСобытие(ДанныеЗанятия.Идентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьРасписаниеСКалендарем(Команда)
	СинхронизироватьРасписаниеСКалендаремНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СинхронизироватьРасписаниеСКалендаремНаСервере()
	ДБ_РаботаСКалендарем.СинхронизироватьРасписаниеСКалендарем();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойКлиентСервер(Форма)
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Если Форма.РежимРаботы = 1 Тогда
		// По ученикам
		Элементы.Дата.Видимость = Ложь;
		Элементы.Ученик.Видимость = Истина;
		Элементы.ФормаДобавитьУченика.Видимость = Истина;
		Элементы.РасписаниеУченик.Видимость = Ложь;
	ИначеЕсли Форма.РежимРаботы = 2 Тогда
		// По датам
		Элементы.Дата.Видимость = Истина;
		Элементы.Ученик.Видимость = Ложь;
		Элементы.ФормаДобавитьУченика.Видимость = Ложь;
		Элементы.РасписаниеУченик.Видимость = Истина;
	Иначе
		// Действий не требуется
	КонецЕсли;
КонецПроцедуры

// Обработчки выполняется после добавления ученика и закрытия формы
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ВыполнитьПослеДобавленияУченика(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Ученик = Результат.Ученик;
	Если Результат.ОбновитьРасписание Тогда
		ОбновитьРасписаниеУченика();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписаниеУченика()
	Объект.Расписание.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа Как Ученик,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия Как Дата,
	|	ДБ_ПланыЗанятийСрезПоследних.КоличествоЧасов Как КоличествоЧасов,
	|	ДБ_ПланыЗанятийСрезПоследних.ВремяПроведения,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаНачала Как ВремяНачала,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаОкончания Как ВремяОкончания,
	|	ДБ_ПланыЗанятийСрезПоследних.Идентификатор КАК ИдентификаторЗанятия,
	|	ЕСТЬNULL(ДБ_УчетРабочегоВремениОбороты.КоличествоЧасовОборот, 0) КАК Проведено
	|ИЗ
	|	РегистрСведений.ДБ_ПланыЗанятий.СрезПоследних(, #Условие#) КАК ДБ_ПланыЗанятийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДБ_УчетРабочегоВремени.Обороты(, , Авто, ) КАК ДБ_УчетРабочегоВремениОбороты
	|		ПО (ДБ_ПланыЗанятийСрезПоследних.УченикГруппа = ДБ_УчетРабочегоВремениОбороты.Контакт)
	|			И (ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия = ДБ_УчетРабочегоВремениОбороты.ПериодДень)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Если РежимРаботы = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Условие#", "УченикГруппа = &Ученик");
		Запрос.УстановитьПараметр("Ученик", Объект.Ученик);
	ИначеЕсли РежимРаботы = 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Условие#", "ДатаЗанятия Между &ДатаНачала И &ДатаОкончания");
		Запрос.УстановитьПараметр("ДатаНачала", Объект.Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.Период.ДатаОкончания);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
// gfd
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРасписания = Объект.Расписание.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРасписания, ВыборкаДетальныеЗаписи);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеЗанятияНаКлиенте(Событие)
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаЗанятия"		, ТекущиеДанные.Дата);
	СтруктураДанных.Вставить("Ученик"			, ТекущиеДанные.Ученик);
	СтруктураДанных.Вставить("КоличествоЧасов"	, ТекущиеДанные.КоличествоЧасов);
	СтруктураДанных.Вставить("Проведено"		, ТекущиеДанные.Проведено);
	СтруктураДанных.Вставить("Идентификатор"	, ТекущиеДанные.ИдентификаторЗанятия);
	Если Событие = "ЗанятиеПроведено" Тогда
		Если СтруктураДанных.Проведено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Занятие уже учтено");
		Иначе
			УчестьЗанятиеНаСервере(СтруктураДанных);
		КонецЕсли;
	ИначеЕсли Событие = "ЗанятиеПеренесено" Тогда
		ПеренестиЗанятиеНаСервере(СтруктураДанных);
	ИначеЕсли Событие = "ЗанятиеОтменено" Тогда
		ОтменитьЗанятиеНаСервере(СтруктураДанных);
	Иначе
		// Действий не требуется
		ОбщегоНазначенияКлиент.СообщитьПользователю("Неизвестное событие, обратитесь к администратору");
	КонецЕсли;
	ОбновитьРасписаниеУченика();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеДобавленияЗанятия(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьРасписаниеУченика();
КонецПроцедуры

#КонецОбласти