
Процедура ДобавитьСобытиеВКалендарьGoogle(Событие) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ДБ_ИспользоватьСинхронизациюСКалендаремGoogle") Тогда
		Возврат;
	КонецЕсли;
	Событие.Вставить("Заголовок", "" + Событие.Ученик);
	Событие.Вставить("ДатаНачала", ДБ_РаботаСКалендарем.ПреобразоватьДатуВФорматКалендаря(Событие.ДатаНачала));
	Событие.Вставить("ДатаОкончания", ДБ_РаботаСКалендарем.ПреобразоватьДатуВФорматКалендаря(Событие.ДатаОкончания));
	
	// Событие уже должно существовать в плане
	ЗаписьРасписания = РегистрыСведений.ДБ_ПланыЗанятий.ЗаписьРасписания(Событие);
	Если ЗаписьРасписания.Выбран() Тогда
		ЗаписьРасписания.Идентификатор = ДБ_РаботаСКалендарем.ДобавитьСобытие(Событие);
		ЗаписьРасписания.Записать();
	Иначе
		// Ошибка
		ОбщегоНазначения.СообщитьПользователю("Не удалось обновить событие календаря Google");
	КонецЕсли;
КонецПроцедуры

Функция ПрочитатьСобытияКалендаря(RefreshToken, СписокСобытий) Экспорт
	// AccessToken действителен только 1 час, поэтому переоб обновлением событий, обновляем токен 			 
	
	// Подготовим временную таблицу событий
	ТаблицаСобытий = Новый ТаблицаЗначений();
	ТаблицаСобытий.Колонки.Добавить("EventID");
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("КоличествоЧасов");
	ТаблицаСобытий.Колонки.Добавить("Описание");
	
	ПолучитьСобытияЗаполнитьТаблицуСобытий(ТаблицаСобытий);
	
	ТекДата = ТекущаяДатаСеанса();
	Для Каждого Событие Из ТаблицаСобытий Цикл
	// ОТЛАДКА+
		НовоеСобытие = СписокСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСобытие, Событие);
		ОбщегоНазначения.СообщитьПользователю("EventID: " + Событие.EventID);
	// ОТЛАДКА-

		Событие.КоличествоЧасов = РассчитатьКоличествоЧасовЗанятия(НовоеСобытие);
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
КонецФункции

Функция РассчитатьКоличествоЧасовЗанятия(Событие)
	Разность = Событие.ДатаОкончания - Событие.ДатаНачала;
	кЧасы = 3600;
	кСекунд = 60;
	Если Разность > 0 Тогда
		Часов = Цел(Разность / кЧасы);
		Минут = Цел((Разность - Часов * кЧасы) / кСекунд);
		
		КоличествоЧасов = Окр(Часов + (Минут / кСекунд), 2);
		Возврат КоличествоЧасов;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ПолучитьСобытияЗаполнитьТаблицуСобытий(ТаблицаСобытий)
	// СсылкаНаКалендарь = "https://calendar.google.com/calendar/u/0?cid=MTJsZTZsNXNxOWw3N2pmOGdjNDZrczZ0ZHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ";
	// КодАвторизации = "4/1AdQt8qiJh1VBIA1cqXj1BC_RUmQLXIvwaivMrCCbvkxG_Wn8gDyjEHX6-DA";
	// УстановитьПривилегированныйРежим(Истина);
	
//	HTTPОтвет = ПолучитьОтветКаленадряGoogle(Новый Структура);
//	Если HTTPОтвет = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Если HTTPОтвет.КодСостояния = 200 Тогда
//		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
//		ЧтениеJSON = Новый ЧтениеJSON;
//		ЧтениеJSON.УстановитьСтроку(Ответ);
//		СобытияКалендаря = ПрочитатьJSON(ЧтениеJSON, Истина);
//		Для Каждого Событие Из СобытияКалендаря["items"] Цикл
//			УдалитьСобытие(Событие["id"]);
//		КонецЦикла;
//	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОтветКалендаряGoogle(ДанныеЗапроса)
	RefreshToken = Константы.ДБ_GoogleRefreshToken.Получить();
	Если RefreshToken = "" Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен ""RefreshToken""");
		Возврат Неопределено;
	КонецЕсли;
	AccessToken = AccessToken(RefreshTokens(RefreshToken));
	
	АдресЗапроса = "https://www.googleapis.com/calendar/v3/calendars/{ИдКалендаря}/events";
	ИдКалендаря = Константы.ДБ_ИдентификаторКалендаря.Получить();
	АдресЗапроса = СтрЗаменить(АдресЗапроса, "{ИдКалендаря}", ИдКалендаря); 
	EventId = "";
	Если ДанныеЗапроса.Свойство("EventId", EventId) И НЕ EventId = "" Тогда
		АдресЗапроса = АдресЗапроса + "/" + EventId;
	КонецЕсли;
	СтруктураURI = СтруктураURI(АдресЗапроса);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, 443 , , , , 15, Новый ЗащищенноеСоединениеOpenSSL);
	Headers = Новый Соответствие;
	Headers.Вставить("Host", СтруктураURI.Хост);
	Headers.Вставить("Content-Type", "application/json");
	Headers.Вставить("Authorization", "Bearer " + AccessToken);
	Headers.Вставить("Accept", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, headers);
	СтрокаJSON = "";
	Если ДанныеЗапроса.Свойство("СтрокаJSON", СтрокаJSON) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPМетод = "";
	Если НЕ ДанныеЗапроса.Свойство("HTTPМетод", HTTPМетод) Тогда
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Иначе
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	КонецЕсли;
	
	Возврат HTTPОтвет;
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция AccessToken(Tokens)
	
	Если ТипЗнч(Tokens) = Тип("Структура") Тогда
		Возврат Tokens.access_token;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // AccessToken()

Функция RefreshTokens(RefreshToken)
	
//	RefreshToken = "1//0c9BnojPnvZNaCgYIARAAGAwSNwF-L9IrO1DFmjYcgPHS54R5nZI0IKRclxuf_gRCEE8EKKUZx9A3ZFKJj1Hhsjw8b3ZJvZCjiK4";
	
	ПараметрыURL = Новый Структура;
	АдресЗапроса = "https://www.googleapis.com/oauth2/v4/token";
	ПараметрыURL.Вставить("client_id", Константы.ДБ_GoogleClientID.Получить());
	ПараметрыURL.Вставить("refresh_token", RefreshToken);
	ПараметрыURL.Вставить("client_secret", Константы.ДБ_GoogleClientSecret.Получить());
	ПараметрыURL.Вставить("grant_type", "refresh_token");
	
	АдресЗапроса = Адрес(АдресЗапроса, ПараметрыURL);
	СтруктураURI = СтруктураURI(АдресЗапроса);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, 443 , , , , 15, Новый ЗащищенноеСоединениеOpenSSL);
	headers = Новый Соответствие;
	headers.Вставить("User-Agent", "Mozilla");
	headers.Вставить("Host", СтруктураURI.Хост);
	headers.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, headers);
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		 Token = ПрочитатьJSON(ЧтениеJSON, Ложь);
		 Возврат Token;
	 Иначе
		 ВызватьИсключение "Произошла ошибка обращения к серверу," + "Токен не получен" +
		 	Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
	КонецЕсли;
	
КонецФункции

Функция Адрес(Знач URL, Знач ПараметрыURL)
	
	Перем МассивПараметров;
	МассивПараметров = Новый Массив;
	Для каждого Параметр Из ПараметрыURL Цикл
		МассивПараметров.Добавить(Параметр.Ключ + "=" + Параметр.Значение);
	КонецЦикла;
	URL = СокрП(URL);
	URL = ?(СтрЗаканчиваетсяНа(URL, "/"), URL, URL + "/"); 
	Возврат URL + "?" + КодироватьСтроку(СтрСоединить(МассивПараметров, "&"),	СпособКодированияСтроки.URLВКодировкеURL);

КонецФункции // ПолучитьПараметры()

Функция ПреобразоватьАкадемическиеЧасыВАстрономические(КоличествоАкадемическихЧасов) Экспорт
	// 1 Академический час равен 40 астрономическим минутам или 2/3 астрономического часа
	// Преобразуем академическое количество часов в минуты
	КоличествоАкадемическихМинут = КоличествоАкадемическихЧасов * 60;
	КоличествоАстрономическихМинут = КоличествоАкадемическихМинут * 2 / 3; 
	КоличествоАстрономическихЧасов = Цел(КоличествоАстрономическихМинут / 60); 
	АстрономическоеВремя = Дата(1, 1, 1, КоличествоАстрономическихЧасов, (КоличествоАстрономическихМинут - КоличествоАстрономическихЧасов * 60), 0);
	Возврат АстрономическоеВремя;
КонецФункции

#Область СинхронизацияСКалендарем

Процедура СинхронизироватьРасписаниеСКалендарем() Экспорт
	// Возможно, нужно указывать период, за который производится синхронизация с календарем google
	// пока что будем синхронизировать расписание полностью, что не очень удобно
	
	// Получение текущего расписания и выгрузка событий в календарь google
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаНачала,
		|	ДБ_ПланыЗанятийСрезПоследних.ДатаОкончания,
		|	ДБ_ПланыЗанятийСрезПоследних.Комментарий,
		|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа.Представление КАК УченикПредставление,
		|	ДБ_ПланыЗанятийСрезПоследних.КоличествоЧасов,
		|	ДБ_ПланыЗанятийСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ДБ_ПланыЗанятий.СрезПоследних(, Идентификатор = """") КАК ДБ_ПланыЗанятийСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Формирование заголовка события
		Заголовок = ВыборкаДетальныеЗаписи.УченикПредставление + " ";
//		Заголовок = Заголовок + Формат(ВыборкаДетальныеЗаписи.ДатаЗанятия, "") + " ";
//		Заголовок = Заголовок + ВыборкаДетальныеЗаписи.КоличествоЧасов;
		СтруктураСобытия = Новый Структура;
		СтруктураСобытия.Вставить("ДатаНачала", ПреобразоватьДатуВФорматКалендаря(ВыборкаДетальныеЗаписи.ДатаНачала));
		СтруктураСобытия.Вставить("ДатаОкончания", ПреобразоватьДатуВФорматКалендаря(ВыборкаДетальныеЗаписи.ДатаОкончания));
		СтруктураСобытия.Вставить("Заголовок", Заголовок);
		EventID = ДобавитьСобытие(СтруктураСобытия);
		Если Не EventID = "" Тогда
			ЗаписьКалендаря = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьКалендаря, ВыборкаДетальныеЗаписи);
			ЗаписьКалендаря.Прочитать();
			// Запись должна существовать в регистре
			Если ЗаписьКалендаря.Выбран() Тогда
				ЗаписьКалендаря.Идентификатор = EventID;
				ЗаписьКалендаря.Записать();
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Не удалось синхронизировать расписание");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСобытие(Событие) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ДБ_ИспользоватьСинхронизациюСКалендаремGoogle") Тогда
		Возврат "";
	КонецЕсли;
	СтруктураСобытия = Новый Соответствие;
	СтруктураСобытия.Вставить("summary", Событие.Заголовок);
	СтруктураСобытия.Вставить("start", Событие.ДатаНачала);
	СтруктураСобытия.Вставить("end", Событие.ДатаОкончания);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	ЗаписатьJSON(ЗаписьJSON, СтруктураСобытия, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("HTTPМетод", "POST");
	СтруктураЗапроса.Вставить("СтрокаJSON", СтрокаJSON);
	
	HTTPОтвет = ПолучитьОтветКалендаряGoogle(СтруктураЗапроса);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		СобытиеКалендаря = ПрочитатьJSON(ЧтениеJSON, Истина);
		Возврат СобытиеКалендаря["id"];
	Иначе
		СообщениеОбОшибке = "Произошла ошибка добавления события" + ОписаниеОшибки() + Символы.ПС
			+ "Статус ответа сервера: " + HTTPОтвет.КодСостояния; 
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
КонецФункции

Функция УдалитьСобытие(EventId) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ДБ_ИспользоватьСинхронизациюСКалендаремGoogle") Тогда
		Возврат Ложь;
	КонецЕсли;
	// Удаляем все события из календаря google
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("HTTPМетод", "DELETE");
	СтруктураЗапроса.Вставить("EventID", EventID);
	
	HTTPОтвет = ПолучитьОтветКалендаряGoogle(СтруктураЗапроса);
	Если НЕ HTTPОтвет = Неопределено И HTTPОтвет.КодСостояния = 204 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ИзменитьСобытие(Событие, EventId) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ДБ_ИспользоватьСинхронизациюСКалендаремGoogle") Тогда
		Возврат "";
	КонецЕсли;
	СтруктураСобытия = Новый Соответствие;
	СтруктураСобытия.Вставить("summary", Событие.Заголовок);
	СтруктураСобытия.Вставить("start", Событие.ДатаНачала);
	СтруктураСобытия.Вставить("end", Событие.ДатаОкончания);
	СтруктураСобытия.Вставить("EventId", EventId);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	ЗаписатьJSON(ЗаписьJSON, СтруктураСобытия, НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("HTTPМетод", "PUT");
	СтруктураЗапроса.Вставить("СтрокаJSON", СтрокаJSON);
	
	HTTPОтвет = ПолучитьОтветКалендаряGoogle(СтруктураЗапроса);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		СобытиеКалендаря = ПрочитатьJSON(ЧтениеJSON, Истина);
		Возврат СобытиеКалендаря["id"];
	Иначе
		СообщениеОбОшибке = "Произошла ошибка добавления события" + ОписаниеОшибки() + Символы.ПС
			+ "Статус ответа сервера: " + HTTPОтвет.КодСостояния; 
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ПреобразоватьДатуВФорматКалендаря(Дата) Экспорт
	Соответствие = Новый Соответствие();
	Соответствие.Вставить("dateTime", Дата);
	Соответствие.Вставить("timeZone", "Europe/Moscow");
	Возврат Соответствие;
КонецФункции

#КонецОбласти
