
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Период.ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
	Объект.Период.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	ОбновитьРасписание();
	УправлениеФормой(ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УченикПриИзменении(Элемент)
	ОбновитьРасписание();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ОбновитьРасписание();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.Расписание.ТекущаяСтрока;
	ЗанятиеПроведено = ТекущиеДанные.Проведено;
	Элементы.ДекорацияУченик.Заголовок = ТекущиеДанные.Ученик;
	Элементы.ДекорацияДатаЗанятия.Заголовок = Формат(ТекущиеДанные.Дата, "ДФ=dd.MM.yyyy;");
	Элементы.ДекорацияВремяНачала.Заголовок = Формат(ТекущиеДанные.ВремяНачала, "ДЛФ=T;");
	Элементы.ДекорацияВремяОкончания.Заголовок = Формат(ТекущиеДанные.ВремяОкончания, "ДЛФ=T;");
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗанятиеПровести(Команда)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ученик", ТекущиеДанные.Ученик);
	ДанныеЗаполнения.Вставить("ДатаЗанятия", ТекущиеДанные.Дата);
	ДанныеЗаполнения.Вставить("КоличествоЧасов", ТекущиеДанные.КоличествоЧасов);
	ЗанятиеПровестиНаСервере(ДанныеЗаполнения);
	ТекущиеДанные.Проведено = Истина;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗанятиеПровестиНаСервере(ДанныеЗанятия)
	// Сначала необходимо проверить, что задание ещё не учтено
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ДанныеЗанятия.ДатаЗанятия);
	ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ДБ_ВидыУчетаРабочегоВремени.Языки);
	УчетВремени = Новый ТаблицаЗначений;
	УчетВремени.Колонки.Добавить("Контакт");
	УчетВремени.Колонки.Добавить("КоличествоЧасов");
	СтрокаУчетаВремени = УчетВремени.Добавить();
	СтрокаУчетаВремени.Контакт = ДанныеЗанятия.Ученик;
	СтрокаУчетаВремени.КоличествоЧасов = ДанныеЗанятия.КоличествоЧасов;
	ДанныеЗаполнения.Вставить("УчетВремени", УчетВремени);
	ДокументУчетаРабочегоВремени = Документы.ДБ_УчетРабочегоВремениНовый.СоздатьДокумент();
	ДокументУчетаРабочегоВремени.Заполнить(ДанныеЗаполнения);
	ДокументУчетаРабочегоВремени.Записать(РежимЗаписиДокумента.Проведение);
	ЗанятиеПроведено = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗанятиеДобавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеПланированияЗанятий", ЭтотОбъект);
	ФормаСобытия = "Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаПланированияЗанятий";
	ОткрытьФорму(ФормаСобытия, , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗанятиеПеренести(Команда)
	ОписаниеСобытия = ПолучитьОписаниеСобытия();
	Если ОписаниеСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура("ОписаниеСобытия", ОписаниеСобытия);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыПереносаЗанятия", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("ВидСобытия, ОписаниеСобытия", "Перенос", ОписаниеСобытия);
	ФормаСобытия = "Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаРедактированияСобытия";
	ОткрытьФорму(ФормаСобытия, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УченикДобавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеДобавленияУченика", ЭтотОбъект);
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаДобавленияУченика", , ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Обработчки выполняется после добавления ученика и закрытия формы
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ВыполнитьПослеДобавленияУченика(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Ученик = Результат.Ученик;
	Если Результат.ОбновитьРасписание Тогда
		ОбновитьРасписание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыПереносаЗанятия(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СобытиеПредыдущее = Неопределено;
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры.Свойство("ОписаниеСобытия", СобытиеПредыдущее);
	КонецЕсли; 
	ЗанятиеДобавитьПеренестиНаСервере(Результат, СобытиеПредыдущее);
	ОбновитьРасписание();
КонецПроцедуры

&НаСервере
Процедура ЗанятиеДобавитьПеренестиНаСервере(ОписаниеСобытияТекущее, ОписаниеСобытияПредыдущее)
	НачатьТранзакцию();
	Попытка
		Если ОписаниеСобытияТекущее.ВидСобытия = "Перенос" Тогда
			РегистрыСведений.ДБ_ПланыЗанятий.УдалитьЗанятие(ОписаниеСобытияПредыдущее);
		КонецЕсли;
		РегистрыСведений.ДБ_ПланыЗанятий.ДобавитьЗанятие(ОписаниеСобытияТекущее);
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю("Не удалось отредактировать событие. Обратитесь к администратору. " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗанятиеОтменить(Команда)
	ОписаниеСобытия = ПолучитьОписаниеСобытия();
	Если ОписаниеСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗанятиеОтменитьНаСервере(ОписаниеСобытия);
	ОбновитьРасписание();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗанятиеОтменитьНаСервере(ОписаниеСобытия)
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ДБ_ПланыЗанятий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УченикГруппа.Установить(ОписаниеСобытия.Ученик);
		НаборЗаписей.Отбор.ДатаЗанятия.Установить(ОписаниеСобытия.ДатаЗанятия);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		СобытиеУдалено = ДБ_РаботаСКалендарем.УдалитьСобытие(ОписаниеСобытия.Идентификатор);
		Если СобытиеУдалено И ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось отменить событие. Обратитесь к администратору. " + ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура НоваяФорма(Команда)
	ОткрытьФорму("Обработка.ДБ_РабочееМестоПреподавателя.Форма.ФормаНовая");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы = Форма.Элементы;
	Элементы.ГруппаКоманд.Доступность = НЕ Форма.ЗанятиеПроведено;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписание()
	Объект.Расписание.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДБ_ПланыЗанятийСрезПоследних.УченикГруппа Как Ученик,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия Как Дата,
	|	ДБ_ПланыЗанятийСрезПоследних.КоличествоЧасов Как КоличествоЧасов,
	|	ДБ_ПланыЗанятийСрезПоследних.ВремяПроведения,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаНачала Как ВремяНачала,
	|	ДБ_ПланыЗанятийСрезПоследних.ДатаОкончания Как ВремяОкончания,
	|	ДБ_ПланыЗанятийСрезПоследних.Идентификатор КАК ИдентификаторЗанятия,
	|	ЕСТЬNULL(ДБ_УчетРабочегоВремениОбороты.КоличествоЧасовОборот, 0) КАК Проведено
	|ИЗ
	|	РегистрСведений.ДБ_ПланыЗанятий.СрезПоследних(, #Условие#) КАК ДБ_ПланыЗанятийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДБ_УчетРабочегоВремени.Обороты(, , Авто, ) КАК ДБ_УчетРабочегоВремениОбороты
	|		ПО (ДБ_ПланыЗанятийСрезПоследних.УченикГруппа = ДБ_УчетРабочегоВремениОбороты.Контакт)
	|			И (ДБ_ПланыЗанятийСрезПоследних.ДатаЗанятия = ДБ_УчетРабочегоВремениОбороты.ПериодДень)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	// Условие может накладываться одновременно на Период и Ученик
	ТекстУсловия = "";
	Если НЕ Объект.Ученик.Пустая() Тогда
		ТекстУсловия = "УченикГруппа = &Ученик";
		Запрос.УстановитьПараметр("Ученик", Объект.Ученик);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
		Если ТекстУсловия = "" Тогда
			ТекстУсловия = ТекстУсловия + "ДатаЗанятия Между &ДатаНачала И &ДатаОкончания";
		Иначе
			ТекстУсловия = ТекстУсловия + " И ДатаЗанятия Между &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачала", Объект.Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.Период.ДатаОкончания);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Условие#", ТекстУсловия);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРасписания = Объект.Расписание.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРасписания, ВыборкаДетальныеЗаписи);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеСобытия()
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("ДатаЗанятия"		, ТекущиеДанные.Дата);
	СтруктураСобытия.Вставить("ВремяНачала"		, ТекущиеДанные.ВремяНачала);
	СтруктураСобытия.Вставить("Ученик"			, ТекущиеДанные.Ученик);
	СтруктураСобытия.Вставить("КоличествоЧасов"	, ТекущиеДанные.КоличествоЧасов);
	СтруктураСобытия.Вставить("Проведено"		, ТекущиеДанные.Проведено);
	СтруктураСобытия.Вставить("Идентификатор"	, ТекущиеДанные.ИдентификаторЗанятия);
	Возврат СтруктураСобытия;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеПланированияЗанятий(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьРасписание();
КонецПроцедуры

#КонецОбласти
